#include "GameScreen.h"



GameScreen::GameScreen(sf::RenderWindow* w)
{
	window = w;
	view = sf::View(sf::FloatRect(0, 0, 1920, 1080));
	w->setView(view);
}

void GameScreen::update()
{
	//TODO: write that
	//world.update(sf::seconds(0));	
}

void GameScreen::draw()
{
	sf::Event event;
	while (window->pollEvent(event))
	{
		if (event.type == sf::Event::Closed || (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape))
			window->close();
		//TODO: Soft moving with mouse click and wheel to zoom
		/*if (event.type == sf::Event::MouseWheelMoved)
		{
			view.zoom(1.1 - (event.mouseWheel.delta*0.2));
			window->setView(view);
		}
		if (event.type == sf::Event::MouseButtonPressed)
		{
			last_mouse_move = mouse_move;
			mouse_move = sf::Vector2f(event.mouseMove.x, event.mouseMove.y);
		}
		else if (event.type == sf::Event::MouseButtonReleased)
		{
			view.move((mouse_move - last_mouse_move));
			window->setView(view);
		}
		else 
		{
			mouse_move = sf::Vector2f(0,0);
			last_mouse_move = sf::Vector2f(0, 0);
		}*/
		if (event.type == sf::Event::KeyPressed)
		  {
		    switch (event.key.code)
		      {
		      case sf::Keyboard::Up:
			view.move(sf::Vector2f(0,-20));
			break;
		      case sf::Keyboard::Down:
			view.move(sf::Vector2f(0, 20));
			break;
		      case sf::Keyboard::Left:
			view.move(sf::Vector2f(-20, 0));
			break;
		      case sf::Keyboard::Right:
			view.move(sf::Vector2f(20, 0));
			break;
		      case sf::Keyboard::Add:
			view.zoom(0.8);
			break;
		      case sf::Keyboard::Subtract:
			view.zoom(1.2);
			break;
		      default:
			break;
		      }
			window->setView(view);
		}
	}
	world.draw(window);
}


GameScreen::~GameScreen()
{
}
